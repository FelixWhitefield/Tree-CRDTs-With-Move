@article{9563274,
  author  = {Kleppmann, Martin and Mulligan, Dominic P. and Gomes, Victor B. F. and Beresford, Alastair R.},
  journal = {IEEE Transactions on Parallel and Distributed Systems},
  title   = {A Highly-Available Move Operation for Replicated Trees},
  year    = {2022},
  volume  = {33},
  number  = {7},
  pages   = {1711-1724},
  doi     = {10.1109/TPDS.2021.3118603}
}

@inproceedings{kleppmann2018automerge,
  title     = {Automerge: Real-time data sync between edge devices},
  author    = {Kleppmann, Martin and Beresford, Alastair R},
  booktitle = {1st UK Mobile, Wearable and Ubiquitous Systems Research Symposium (MobiUK 2018). https://mobiuk. org/abstract/S4-P5-Kleppmann-Automerge. pdf},
  pages     = {101--105},
  year      = {2018}
}

@inproceedings{10.1145/2757667.2757683,
  author    = {Tao, Vinh and Shapiro, Marc and Rancurel, Vianney},
  title     = {Merging Semantics for Conflict Updates in Geo-Distributed File Systems},
  year      = {2015},
  isbn      = {9781450336079},
  publisher = {Association for Computing Machinery},
  address   = {New York, NY, USA},
  url       = {https://doi.org/10.1145/2757667.2757683},
  doi       = {10.1145/2757667.2757683},
  abstract  = {We present our model of file systems and our merging semantics for resolving conflict updates in geo-distributed file systems. The system model fully describes a file system with all of its components including hard links. This model is able to identify all conflict cases which are classified into direct, such as concurrent updates to the same file, and indirect, such as cycles in the namespace of the file system. The merging semantics resolve all types of conflicts while being able to preserve the effect of all conflict updates. Our implementation of the system and the merging semantics outperforms the existing systems in terms of feature completeness.},
  booktitle = {Proceedings of the 8th ACM International Systems and Storage Conference},
  articleno = {10},
  numpages  = {12},
  keywords  = {geo-distributed file system, state-based replication, algorithm, conflict resolution, eventual consistency, CRDT},
  location  = {Haifa, Israel},
  series    = {SYSTOR '15}
}

@misc{https://doi.org/10.48550/arxiv.1805.04263,
  doi       = {10.48550/ARXIV.1805.04263},
  url       = {https://arxiv.org/abs/1805.04263},
  author    = {Kleppmann, Martin and Gomes, Victor B. F. and Mulligan, Dominic P. and Beresford, Alastair R.},
  keywords  = {Distributed, Parallel, and Cluster Computing (cs.DC), FOS: Computer and information sciences, FOS: Computer and information sciences},
  title     = {OpSets: Sequential Specifications for Replicated Datatypes (Extended Version)},
  publisher = {arXiv},
  year      = {2018},
  copyright = {arXiv.org perpetual, non-exclusive license}
}

@misc{https://doi.org/10.48550/arxiv.2103.04828,
  doi       = {10.48550/ARXIV.2103.04828},
  url       = {https://arxiv.org/abs/2103.04828},
  author    = {Nair, Sreeja and Meirim, Filipe and Pereira, Mário and Ferreira, Carla and Shapiro, Marc},
  keywords  = {Distributed, Parallel, and Cluster Computing (cs.DC), FOS: Computer and information sciences, FOS: Computer and information sciences},
  title     = {A coordination-free, convergent, and safe replicated tree},
  publisher = {arXiv},
  year      = {2021},
  copyright = {arXiv.org perpetual, non-exclusive license}
}
  
  
  @misc{https://doi.org/10.48550/arxiv.1207.5990,
  doi       = {10.48550/ARXIV.1207.5990},
  url       = {https://arxiv.org/abs/1207.5990},
  author    = {Ahmed-Nacer, Mehdi and Martin, Stéphane and Urso, Pascal},
  keywords  = {Distributed, Parallel, and Cluster Computing (cs.DC), Databases (cs.DB), FOS: Computer and information sciences, FOS: Computer and information sciences},
  title     = {File system on CRDT},
  publisher = {arXiv},
  year      = {2012},
  copyright = {arXiv.org perpetual, non-exclusive license}
}

@inproceedings{8509247,
  author    = {Leis, Viktor and Haubenschild, Michael and Kemper, Alfons and Neumann, Thomas},
  booktitle = {2018 IEEE 34th International Conference on Data Engineering (ICDE)},
  title     = {LeanStore: In-Memory Data Management beyond Main Memory},
  year      = {2018},
  volume    = {},
  number    = {},
  pages     = {185-196},
  doi       = {10.1109/ICDE.2018.00026}
}

@misc{GoogleDrive,
  title     = {Personal cloud storage and file-sharing platform},
  url       = {https://www.google.co.uk/intl/en-GB/drive/},
  journal   = {Google},
  publisher = {Google}
} 

@misc{MicrosftPlaceholderFiles,
  title  = {Build a Cloud Sync Engine that Supports Placeholder Files},
  url    = {https://learn.microsoft.com/en-us/windows/win32/cfapi/build-a-cloud-file-sync-engine},
  year   = {2021},
  author = {Microsoft}
}
@misc{WhatIsWeb3,
  author   = {Ethereum},
  url      = {https://ethereum.org/en/web3/},
  accessed = {28/11/2022},
  title    = {Introduction to Web3}
}
@inproceedings{CAPTheorem,
  author  = {Brewer, Eric},
  year    = {2000},
  month   = {01},
  pages   = {7},
  title   = {Towards robust distributed systems},
  journal = {PODC},
  doi     = {10.1145/343477.343502}
}
@article{6122006,
  author  = {Gilbert, Seth and Lynch, Nancy},
  journal = {Computer},
  title   = {Perspectives on the CAP Theorem},
  year    = {2012},
  volume  = {45},
  number  = {2},
  pages   = {30-36},
  doi     = {10.1109/MC.2011.389}
}

  @article{10.1145/564585.564601,
  author     = {Gilbert, Seth and Lynch, Nancy},
  title      = {Brewer's Conjecture and the Feasibility of Consistent, Available, Partition-Tolerant Web Services},
  year       = {2002},
  issue_date = {June 2002},
  publisher  = {Association for Computing Machinery},
  address    = {New York, NY, USA},
  volume     = {33},
  number     = {2},
  issn       = {0163-5700},
  url        = {https://doi.org/10.1145/564585.564601},
  doi        = {10.1145/564585.564601},
  abstract   = {When designing distributed web services, there are three properties that are commonly desired: consistency, availability, and partition tolerance. It is impossible to achieve all three. In this note, we prove this conjecture in the asynchronous network model, and then discuss solutions to this dilemma in the partially synchronous model.},
  journal    = {SIGACT News},
  month      = {jun},
  pages      = {51–59},
  numpages   = {9}
}
@article{6133253,
  author  = {Brewer, Eric},
  journal = {Computer},
  title   = {CAP twelve years later: How the "rules" have changed},
  year    = {2012},
  volume  = {45},
  number  = {2},
  pages   = {23-29},
  doi     = {10.1109/MC.2012.37}
}

@article{6127847,
  author  = {Abadi, Daniel},
  journal = {Computer},
  title   = {Consistency Tradeoffs in Modern Distributed Database System Design: CAP is Only Part of the Story},
  year    = {2012},
  volume  = {45},
  number  = {2},
  pages   = {37-42},
  doi     = {10.1109/MC.2012.33}
}

@inproceedings{10.1007/978-3-642-24550-3_29,
  author    = {Shapiro, Marc
               and Pregui{\c{c}}a, Nuno
               and Baquero, Carlos
               and Zawirski, Marek},
  editor    = {D{\'e}fago, Xavier
               and Petit, Franck
               and Villain, Vincent},
  title     = {Conflict-Free Replicated Data Types},
  booktitle = {Stabilization, Safety, and Security of Distributed Systems},
  year      = {2011},
  publisher = {Springer Berlin Heidelberg},
  address   = {Berlin, Heidelberg},
  pages     = {386--400},
  abstract  = {Replicating data under Eventual Consistency (EC) allows any replica to accept updates without remote synchronisation. This ensures performance and scalability in large-scale distributed systems (e.g., clouds). However, published EC approaches are ad-hoc and error-prone. Under a formal Strong Eventual Consistency (SEC) model, we study sufficient conditions for convergence. A data type that satisfies these conditions is called a Conflict-free Replicated Data Type (CRDT). Replicas of any CRDT are guaranteed to converge in a self-stabilising manner, despite any number of failures. This paper formalises two popular approaches (state- and operation-based) and their relevant sufficient conditions. We study a number of useful CRDTs, such as sets with clean semantics, supporting both add and remove operations, and consider in depth the more complex Graph data type. CRDT types can be composed to develop large-scale distributed applications, and have interesting theoretical properties.},
  isbn      = {978-3-642-24550-3}
}
@inproceedings{10.1145/3359591.3359737,
  author    = {Kleppmann, Martin and Wiggins, Adam and van Hardenberg, Peter and McGranaghan, Mark},
  title     = {Local-First Software: You Own Your Data, in Spite of the Cloud},
  year      = {2019},
  isbn      = {9781450369954},
  publisher = {Association for Computing Machinery},
  address   = {New York, NY, USA},
  url       = {https://doi.org/10.1145/3359591.3359737},
  doi       = {10.1145/3359591.3359737},
  abstract  = {Cloud apps like Google Docs and Trello are popular because they enable real-time collaboration with colleagues, and they make it easy for us to access our work from all of our devices. However, by centralizing data storage on servers, cloud apps also take away ownership and agency from users. If a service shuts down, the software stops functioning, and data created with that software is lost. In this article we propose local-first software, a set of principles for software that enables both collaboration and ownership for users. Local-first ideals include the ability to work offline and collaborate across multiple devices, while also improving the security, privacy, long-term preservation, and user control of data. We survey existing approaches to data storage and sharing, ranging from email attachments to web apps to Firebase-backed mobile apps, and we examine the trade-offs of each. We look at Conflict-free Replicated Data Types (CRDTs): data structures that are multi-user from the ground up while also being fundamentally local and private. CRDTs have the potential to be a foundational technology for realizing local-first software. We share some of our findings from developing local-first software prototypes at the Ink &amp; Switch research lab over the course of several years. These experiments test the viability of CRDTs in practice, and explore the user interface challenges for this new data model. Lastly, we suggest some next steps for moving towards local-first software: for researchers, for app developers, and a startup opportunity for entrepreneurs.},
  booktitle = {Proceedings of the 2019 ACM SIGPLAN International Symposium on New Ideas, New Paradigms, and Reflections on Programming and Software},
  pages     = {154–178},
  numpages  = {25},
  keywords  = {mobile computing, peer-to-peer communication, collaboration software, data ownership, CRDTs},
  location  = {Athens, Greece},
  series    = {Onward! 2019}
}


@article{Almeida_2018,
  doi       = {10.1016/j.jpdc.2017.08.003},
  url       = {https://doi.org/10.1016\%2Fj.jpdc.2017.08.003},
  year      = 2018,
  month     = {jan},
  publisher = {Elsevier {BV}
               },
  volume    = {111},
  pages     = {162--173},
  author    = {Paulo S{\'{e}}rgio Almeida and Ali Shoker and Carlos Baquero},
  title     = {Delta state replicated data types},
  journal   = {Journal of Parallel and Distributed Computing}
}

@inproceedings{10.1007/978-3-662-43352-2_11,
  author    = {Baquero, Carlos
               and Almeida, Paulo S{\'e}rgio
               and Shoker, Ali},
  editor    = {Magoutis, Kostas
               and Pietzuch, Peter},
  title     = {Making Operation-Based CRDTs Operation-Based},
  booktitle = {Distributed Applications and Interoperable Systems},
  year      = {2014},
  publisher = {Springer Berlin Heidelberg},
  address   = {Berlin, Heidelberg},
  pages     = {126--140},
  abstract  = {Conflict-free Replicated Datatypes (CRDT) are usually classified as either state-based or operation-based. However, the standard definition of op-based CRDTs is very encompassing, allowing even sending the full-state, blurring the distinction. We introduce pure op-based CRDTs, that can only send operations to other replicas, drawing a clear distinction from state-based ones. Datatypes with commutative operations can be trivially implemented as pure op-based CRDTs using standard reliable causal delivery. We propose an extended API -- tagged reliable causal broadcast -- that provides causality information upon delivery, and show how it can be used to also implement other datatypes having non-commutative operations, through the use of a PO-Log  -- a partially ordered log of operations -- inside the datatype. A semantically-based PO-Log compaction framework, using both causality and what we denote by causal stability, allows obtaining very compact replica state for pure op-based CRDTs, while also benefiting from small message sizes.},
  isbn      = {978-3-662-43352-2}
}

@inproceedings{5158449,
  author    = {Preguica, Nuno and Marques, Joan Manuel and Shapiro, Marc and Letia, Mihai},
  booktitle = {2009 29th IEEE International Conference on Distributed Computing Systems},
  title     = {A Commutative Replicated Data Type for Cooperative Editing},
  year      = {2009},
  volume    = {},
  number    = {},
  pages     = {395-403},
  doi       = {10.1109/ICDCS.2009.20}
}

@inproceedings{Najafzadeh0E18,
  title     = {Co-Design and Verification of an Available File System},
  author    = {Mahsa Najafzadeh and Marc Shapiro 0001 and Patrick Eugster},
  year      = {2018},
  doi       = {10.1007/978-3-319-73721-8_17},
  url       = {https://doi.org/10.1007/978-3-319-73721-8_17},
  researchr = {https://researchr.org/publication/Najafzadeh0E18},
  cites     = {0},
  citedby   = {0},
  pages     = {358-381},
  booktitle = {Verification, Model Checking, and Abstract Interpretation - 19th International Conference, VMCAI 2018, Los Angeles, CA, USA, January 7-9, 2018, Proceedings},
  editor    = {Isil Dillig and Jens Palsberg},
  volume    = {10747},
  series    = {Lecture Notes in Computer Science},
  publisher = {Springer},
  isbn      = {978-3-319-73721-8}
}
@inproceedings{10.1145/3465332.3470872,
  author    = {Vaillant, Romain and Vasilas, Dimitrios and Shapiro, Marc and Nguyen, Thuy Linh},
  title     = {CRDTs for Truly Concurrent File Systems},
  year      = {2021},
  isbn      = {9781450385503},
  publisher = {Association for Computing Machinery},
  address   = {New York, NY, USA},
  url       = {https://doi.org/10.1145/3465332.3470872},
  doi       = {10.1145/3465332.3470872},
  abstract  = {Building scalable and highly available geo-replicated file systems is hard. These systems need to resolve conflicts that emerge in concurrent operations in a way that maintains file system invariants, is meaningful to the user, and does not depart from the traditional file system interface. Conflict resolution in existing systems often leads to unexpected or inconsistent results. This paper introduces ElmerFS, a geo-replicated, truly concurrent file system designed with the aim of addressing these challenges. ElmerFS is based on two key ideas: (1) the use of Conflict-Free Replicated Data Types (CRDTs) for representing file system structures, which ensures that replicas converge to a correct state, and (2) conflict resolution rules, which are determined by the choice of CRDT types and their composition, are designed with the principle of being intuitive to the user. We argue that if the state of the file system after resolving a conflict conveys to the user the resolved conflict in an intuitive way, the user can complement or reverse it using traditional file system operations. We discuss the challenges in the design of geo-replicated weakly consistent file systems, and present the design of ElmerFS.},
  booktitle = {Proceedings of the 13th ACM Workshop on Hot Topics in Storage and File Systems},
  pages     = {35–41},
  numpages  = {7},
  location  = {Virtual, USA},
  series    = {HotStorage '21}
}